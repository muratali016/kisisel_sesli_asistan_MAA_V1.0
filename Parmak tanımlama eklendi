import cv2
import mediapipe as mp
import time

import HandTrackingModule as htm

import numpy as np
from matplotlib import pyplot as plt
import speech_recognition as konus
from os import system as komut
import os
import random
from playsound import playsound
from gtts import gTTS 
faces_cascade=cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
cap = cv2.VideoCapture(0)

def lower(text:str):
    neWText = str()
    for i in text:
        if i in buyukAlfabe:
            index = buyukAlfabe.index(i)
            neWText += kucukAlfabe[index]
        else:
            neWText += i


    return  neWText
def speak(string):
    tts=gTTS(string ,lang='tr')
    rand =random.randint(1,10000)
    file='audio-'+str (rand)+'.mp3'
    tts.save(file)
    playsound(file)
    os.remove(file)
r = konus.Recognizer()
with konus.Microphone() as source:
    speak("ne yapmamı istersin murat?")
    audio = r.listen(source)
buyukAlfabe = "ABCÇDEFGĞHİIJKLMNOÖPRSŞTUÜVYZ"
kucukAlfabe ="abcçdefgğhiıjklmnoöprsştuüvyz"

 

def parmaktanımla():
	mpHands = mp.solutions.hands
	hands = mpHands.Hands()
	mpDraw = mp.solutions.drawing_utils

	pTime = 0
	cTime = 0
	while True:
	   
	    success, img = cap.read()
	    imgBGR = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
	    results = hands.process(imgBGR)
	    # yazdır(results.multi_hand_landmarks)
	 
	    if results.multi_hand_landmarks:
	        for handLms in results.multi_hand_landmarks:
	            for id, lm in enumerate(handLms.landmark):
	                # yazdır(id, lm)
	                h, w, c = img.shape
	                cx, cy = int(lm.x * w), int(lm.y * h)
	                print(id, cx, cy)
	                # eger eşitse id == 4:
	                cv2.circle(img, (cx, cy), 7, (0, 0, 255), cv2.FILLED)
	 
	            mpDraw.draw_landmarks(img, handLms, mpHands.HAND_CONNECTIONS)
	 
	    cTime = time.time()
	    fps = 1 / (cTime - pTime)
	    pTime = cTime
	 
	    cv2.putText(img, str(int(fps)), (10, 70), cv2.FONT_HERSHEY_PLAIN, 2,
	                (0, 0, 255), 2)
		 
	    cv2.imshow("Image", img)
	    if cv2.waitKey(1) & 0xFF == ord("k") :
	       		         break
		


def tanımlama():
	speak("parmak tanımlaması için P ye bas")
	while(True):
				_,kare=cap.read()
		
		
				gray=cv2.cvtColor(kare,cv2.COLOR_BGR2GRAY)
				faces=faces_cascade.detectMultiScale(gray,1.1,4)
	 	
				for (x,y,w,h) in faces :
					cv2.rectangle(kare,(x,y), (x+w,y+h),(0,255,0),3)

						
			 	 			
				cv2.imshow("MAA YÜZ TANIMA SİSTEMİ",kare)	

				if cv2.waitKey(1) & 0xFF == ord("p") :
	       		         komut(parmaktanımla())
	





Flag = str

try:
    text = r.recognize_google(audio,language="tr-TR")
    speak("Algılanan :" + text)
    Flag = True
    text = lower(text)
except konus.UnknownValueError:
    speak("Ne dedin bir daha dene?")
except konus.RequestError as e:
    speak("sistem sıkıntılı; {0}".format(e))
       

if Flag:
    if text == "yüz tanımla":
       komut(tanımlama()) 


 
mpHands = mp.solutions.hands
hands = mpHands.Hands()
mpDraw = mp.solutions.drawing_utils

pTime = 0
cTime = 0
def parmaktanımla():
	while True:
	   
	    success, img = cap.read()
	    imgBGR = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
	    results = hands.process(imgBGR)
	    # yazdır(results.multi_hand_landmarks)
	 
	    if results.multi_hand_landmarks:
	        for handLms in results.multi_hand_landmarks:
	            for id, lm in enumerate(handLms.landmark):
	                # yazdır(id, lm)
	                h, w, c = img.shape
	                cx, cy = int(lm.x * w), int(lm.y * h)
	                print(id, cx, cy)
	                # eger eşitse id == 4:
	                cv2.circle(img, (cx, cy), 7, (0, 0, 255), cv2.FILLED)
	 
	            mpDraw.draw_landmarks(img, handLms, mpHands.HAND_CONNECTIONS)
	 
	    cTime = time.time()
	    fps = 1 / (cTime - pTime)
	    pTime = cTime
	 
	    cv2.putText(img, str(int(fps)), (10, 70), cv2.FONT_HERSHEY_PLAIN, 2,
	                (0, 0, 255), 2)
		 
	    cv2.imshow("Image", img)
	    if cv2.waitKey(1) & 0xFF == ord("k") :
	       		         break
		
			

video.release()
cv2.destroyAllWindows()	
